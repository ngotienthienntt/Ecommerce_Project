1) secction 1: introduce
2) section 2: init folder structure, install package
    - morgan
    - helmet
    - compression
3) section 3: connect mongo db (7 tips)
    1) the defect of previous connection
    2) new version of connection
    3) Checking how many connection in system
    4) Notify error when server overload
    5) Should we disconnect constantly?
    6) What is poolSize? why is it important?
    7) What happen if it's over poolSize?

4) section 4: config and .env
    config: Lưu trữ những cài đặt, phiên bản
    .env: secret information

5) section 5: Register with json webtoken
    1) Why we use apikey?
        1) check auth, limit anonymous traffic, check permission
    disadvantage: check database per request => use redis

6) section 6: api key- permission
    1) Why we use apikey
        - auth, limit anonymous traffic, 
        - check permission,
    disadvantage: check db every request => redis

7) section 7: error handle
    1) create handle in middleware, don't use try catch in every service or controller

8) section 8: success response handle
    1) create success reponse for ok and created
    
9) section 9: login
    1) check email, password
    2) reset access token, refresh tokens
    3) return data
10) section 10: logout and authenticaiton
    1) Authentication
11) section 11: handle refresh token

12) section 12: scheme product
    Tại sao tạo attribute ở product rồi lại sinh ra schema Clothing để lưu attribute
        - atribute ở product chỉ lưu 4 field để hiển thị ở ngoài
        - Clothing sẽ lưu nhiều attribute hơn để hiển thị ở chi tiết
    
13) section 13: api-product-factory-pattern
    - add transaction when create product (product + subproduct)

14) section 14: api product-optimze

15) section 15: api product-factory-strategy-partern

16) section 16: isDraft, isPublish, unPublish, get list draft, get list publish, search product

17) section 17: findOne, findAll, selectdata, unselectData

18) section 18: post, put, patch in update product
    - put: update all (create new) Product
    - patch update what you want to update 

19) section 19: inventories(hang ton kho) model vs service
    ?? add new type of product => edit code => add new type extends from product
    
20) section 20 + 21: discount models

21) section 21: discount service
    1/ Generate discount code [Shop | Admin]
    2) Get discount amount [User]
    3) Get all discount code [User | Shop]
    4) Verify discount code [User]
    5) Delete disocunt code [Shop | admin]
    6) Cancel discount code [user]

22) section 22: discount service full
    1) create discount
    2) get product by discount code
    3) get discount by shop
    4) get discount amount

    how to delete use(filed is delete and save in backup db)

23) section 23: cart service part 1
    1) add product to card[User]
    2) reduce product to [User]
    3) increase quantity of product in card[User]
    4) Get list product from card[User]
    5) delete cart[User]
    6) delete item in card[User]

24) section 24: cart service part 2
    2) reduce product to [User]
    3) increase quantity of product in card[User]
    4) Get list product from card[User]
    5) delete cart[User]
    6) delete item in card[User]

38 + 39) section 38: nested comment
    1) add comment (User, Shop)
    2) get a list of comment (User, shop)
    3) delete comment (user, shop, admin)
    

40) section 40: notification 
    1) Send notification -> 1.000.000 user?
        - seperate into part(Message queue)
            Message queue 1: 1-100.000
            Message queue 2: 100.001 - 200.000
            .......
        - nếu userid is not integer _> hash bawnm nó ra
    2) What would you do to reduce the missing Message (lost data)?
    3) How to ignore duplicate message?
    4) HOw to build data to seperate service and load?
    5) How to ensure the order of message queue?
    6) How to resolve when the message is too much

41) section 41: notification - pull, push pattern (lưu trữ notification trong database)
    1) một số cách khắc phục khi insert or find large data
        - use index in database
        - panigation
        - aync
        - phân tán dữ liệu trên nhiều note 
        - cache
    2) Difficulties with too many User and Notifications
            - push
                ưu: được gửi đến tất cả user
                nhược điểm:- công việc lớn trong 1 lần
            - pull
                ưu: chỉ có user đăng nhập với được lấy
                nhược: 
                        - request nhiều lần
    => kết hợp cả 2push 
        pull: ít khi ghé
        push: dành cho vip(cả pull), thường xuyên ghé

42) section 42: implement notification on shopDEv
    - 2 stage: 
        + design structure
        + use third party(firebase to send noti)

43) section 43: kafka (tốc độ hơn 2 lần)

44) section 44: rabbit mq (ổn định và quen thuộc hơn so với kafka)


32+33) logger discord
45+46) Microservice

49 + 50) handle message queue TTL + Error LOGIC

51) ordering messsage in pub/sub or queue
52+53+54) ordered message


64)
65)
66)
67) AWS